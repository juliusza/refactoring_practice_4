{"version":3,"sources":["components/InfoBar.js","App.js","serviceWorker.js","index.js"],"names":["InfoBar","react_default","a","createElement","data-testid","className","this","props","text","imageUrl","alt","src","Component","App","state","data","selectedRow","undefined","selectedCol","columns","Header","accessor","fetch","response","json","setState","rowInfo","column","index","id","selectedCellText","_this2","colId","row","es","pageSizeOptions","defaultPageSize","getTdProps","onClick","e","style","background","isCellSelected","components_InfoBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAaeA,mLATP,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,cAAY,UAAUC,UAAU,WACxCJ,EAAAC,EAAAC,cAAA,SAAIG,KAAKC,MAAMC,MACdF,KAAKC,MAAME,UACRR,EAAAC,EAAAC,cAAA,OAAKO,IAAI,YAAYC,IAAKL,KAAKC,MAAME,mBAL/BG,aCgFPC,6MA3EXC,MAAQ,CAEJC,KAAM,GACNC,iBAAaC,EACbC,iBAAaD,EACbE,QAAS,CAAC,CACNC,OAAQ,KACRC,SAAU,MACX,CACCD,OAAQ,WACRC,SAAU,WACX,CACCD,OAAQ,QACRC,SAAU,SACX,CACCD,OAAQ,MACRC,SAAU,4NAKSC,MAAM,6DAAvBC,kBACaA,EAASC,cAAtBT,SAENT,KAAKmB,SAAS,CAACV,kJAGJW,EAASC,GACpB,OAAOrB,KAAKQ,MAAME,aACXV,KAAKQ,MAAMI,aACXQ,EAAQE,QAAUtB,KAAKQ,MAAME,YAAYY,OACzCD,EAAOE,KAAOvB,KAAKQ,MAAMI,YAAYW,oCAGvC,IAeDC,EACArB,EAhBCsB,EAAAzB,KAkBL,GAAIA,KAAKQ,MAAME,YAAa,CACxB,IAAMgB,EAAQ1B,KAAKQ,MAAMI,YAAYW,GAErCC,EAAmBxB,KAAKQ,MAAME,YAAYiB,IAAID,GAC9CvB,EAAqB,QAAVuB,EAAkBF,OAAmBb,OAEhDa,EAAmB,6BAIvB,OAAO7B,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACInB,KAAMT,KAAKQ,MAAMC,KACjBI,QAASb,KAAKQ,MAAMK,QACpBgB,gBAAiB,CAAC,GAAI,GAAI,KAC1BC,gBAAiB,GACjBC,WAjCW,SAACvB,EAAOY,EAASC,GAChC,OAAKD,EAGE,CACHY,QAAS,SAAAC,GACLR,EAAKN,SAAS,CAACT,YAAaU,EAASR,YAAaS,KAEtDa,MAAO,CACHC,WAAYV,EAAKW,eAAehB,EAASC,GAAU,OAAS,UAPzD,MAiCX1B,EAAAC,EAAAC,cAACwC,EAAD,CAASnC,KAAMsB,EAAkBrB,SAAUA,YAvErCG,aCMEgC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.9265841b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass InfoBar extends Component {\n    render() {\n        return <div data-testid='infobar' className='infobar'>\n            <p>{this.props.text}</p>\n            {this.props.imageUrl &&\n                <img alt='album art' src={this.props.imageUrl} />\n            }\n        </div>;\n    }\n}\n\nexport default InfoBar;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'react-table/react-table.css';\nimport ReactTable from 'react-table';\nimport InfoBar from './components/InfoBar';\n\nclass App extends Component {\n    state = {\n        // Will initially render an empty table\n        data: [],\n        selectedRow: undefined,\n        selectedCol: undefined,\n        columns: [{\n            Header: 'Id',\n            accessor: 'id'\n        }, {\n            Header: 'Album Id',\n            accessor: 'albumId'\n        }, {\n            Header: 'Title',\n            accessor: 'title'\n        }, {\n            Header: 'URL',\n            accessor: 'url'\n        }]\n    };\n\n    async componentDidMount() {\n        const response = await fetch('https://jsonplaceholder.typicode.com/photos');\n        const data = await response.json();\n\n        this.setState({data});\n    }\n\n    isCellSelected(rowInfo, column) {\n        return this.state.selectedRow\n            && this.state.selectedCol\n            && rowInfo.index === this.state.selectedRow.index\n            && column.id === this.state.selectedCol.id;\n    }\n\n    render() {\n        const getTdProps = (state, rowInfo, column) => {\n            if (!rowInfo) {\n                return {};\n            }\n            return {\n                onClick: e => {\n                    this.setState({selectedRow: rowInfo, selectedCol: column});\n                },\n                style: {\n                    background: this.isCellSelected(rowInfo, column) ? 'grey' : 'white',\n                }\n            };\n        };\n\n        let selectedCellText;\n        let imageUrl;\n\n        if (this.state.selectedRow) {\n            const colId = this.state.selectedCol.id;\n\n            selectedCellText = this.state.selectedRow.row[colId];\n            imageUrl = colId === 'url' ? selectedCellText : undefined;\n        } else {\n            selectedCellText = 'please select a table cell';\n        }\n\n        /*no way to show all records with this lib, so hopefully this is good enough*/\n        return <div>\n            <ReactTable\n                data={this.state.data}\n                columns={this.state.columns}\n                pageSizeOptions={[10, 50, 5000]}\n                defaultPageSize={10}\n                getTdProps={getTdProps}\n            />\n            <InfoBar text={selectedCellText} imageUrl={imageUrl}/>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}